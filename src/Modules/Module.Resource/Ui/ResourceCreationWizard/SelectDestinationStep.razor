@using System.Diagnostics
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.DependencyInjection
@using Module.Destination.Contract
@using Module.Resource.Helper
@using Module.Resource.Ui.ResourceCreationWizard.DestinationMetadata
@using Modules.Shared.Interfaces

<div class="flex flex-col gap-6 dark:text-white w-full h-full">
    <h1 class="text-lg font-semibold">Choose the destination</h1>
    <div class="grid grid-cols-2 gap-8">
        <div class="grid grid-cols-2 gap-4"
             hx-get="/resources/create/wizard/metadata"
             hx-trigger="change"
             hx-target="#destination-type-metadata"
             hx-swap="innerHTML"
             hx-include="this">
            @foreach (var destinationTypeGroup in DestinationTypesUi.AllGrouped())
            {
                if (DestinationTypesHelper.ValidDestinationTypes(CreateResourceStepForm!.ResourceTypeId, destinationTypeGroup.Key).Any())
                {
                    <h2 class="text-md font-semibold col-span-2">@destinationTypeGroup.Key</h2>
                }

                foreach (var destinationType in DestinationTypesHelper.ValidDestinationTypes(CreateResourceStepForm!.ResourceTypeId, destinationTypeGroup.Key))
                {
                    {
                        var isChecked = SelectDestinationStepForm?.DestinationTypeId == destinationType.Id ||
                                        SelectDestinationStepForm?.DestinationTypeId == null &&
                                        destinationType.Id == DestinationTypesHelper.ValidDestinationTypes(CreateResourceStepForm!.ResourceTypeId, destinationTypeGroup.Key).First().Id;

                        <StepPanel Id="@destinationType.Id" IdName="destinationTypeId" Name="@destinationType.Name"
                                   Description="@destinationType.Description"
                                   Icon="@destinationType.Icon" IsChecked="@isChecked"/>
                    }
                }
            }
        </div>
        <div id="destination-type-metadata">
            @switch (SelectDestinationStepForm?.DestinationTypeId.ToString())
            {
                case DestinationTypes.DockerEngineId:
                    <DockerContainerMetadata/>
                    break;
                case DestinationTypes.PodmanContainerId:
                case DestinationTypes.WasmtimeId:
                    break;
            }
        </div>
    </div>
</div>

@code {
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = null!;

    private CreateResourceStepForm? CreateResourceStepForm { get; set; }
    private SelectDestinationStepForm? SelectDestinationStepForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Debug.Assert(HttpContextAccessor.HttpContext != null, "HttpContextAccessor.HttpContext != null");
        var ploydWebStore = HttpContextAccessor.HttpContext.RequestServices.GetRequiredService<IPloydWebStore>();

        CreateResourceStepForm = await ploydWebStore
            .RetrieveAsync<CreateResourceStepForm>(nameof(CreateResourceStepForm));

        SelectDestinationStepForm = await ploydWebStore
            .RetrieveAsync<SelectDestinationStepForm>(nameof(SelectDestinationStepForm));
    }

}
