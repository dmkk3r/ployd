@using System.Diagnostics
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.DependencyInjection
@using Module.Destination.Contract
@using Modules.Shared.Interfaces
@using Module.Resource.Ui.ResourceCreationWizard.DestinationMetadata

<div class="flex flex-col gap-6 dark:text-white w-full h-full">
    <h1 class="text-lg font-semibold">Choose the destination</h1>
    <div class="flex flex-row">
        <div class="grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4"
             hx-get="/resources/create/wizard/metadata"
             hx-trigger="change"
             hx-target="#destination-type-metadata"
             hx-swap="outerHTML"
             hx-include="this">
            @if (ValidDestinationTypesContainerEngineBased(CreateResourceStepForm!.ResourceTypeId).Any())
            {
                <h2 class="text-md font-semibold col-span-2 md:col-span-3 xl:col-span-4">Container engine</h2>
            }
            @foreach (var destinationType in ValidDestinationTypesContainerEngineBased(CreateResourceStepForm!.ResourceTypeId))
            {
                {
                    var isChecked = SelectDestinationStepForm?.DestinationTypeId == destinationType.Id;
                    <StepPanel Id="@destinationType.Id" IdName="destinationTypeId" Name="@destinationType.Name"
                               Description="@destinationType.Description"
                               Icon="@destinationType.Icon" IsChecked="@isChecked"/>
                }
            }
            @if (ValidDestinationTypesWebAssemblyRuntimeBased(CreateResourceStepForm!.ResourceTypeId).Any())
            {
                <h2 class="text-md font-semibold col-span-2 md:col-span-3 xl:col-span-4">WebAssembly runtime</h2>
            }
            @foreach (var destinationType in ValidDestinationTypesWebAssemblyRuntimeBased(CreateResourceStepForm!.ResourceTypeId))
            {
                {
                    var isChecked = SelectDestinationStepForm?.DestinationTypeId == destinationType.Id;
                    <StepPanel Id="@destinationType.Id" IdName="destinationTypeId" Name="@destinationType.Name"
                               Description="@destinationType.Description"
                               Icon="@destinationType.Icon" IsChecked="@isChecked"/>
                }
            }
        </div>


        @if (ValidDestinationTypesContainerEngineBased(CreateResourceStepForm!.ResourceTypeId).Any(dt => dt.Id == SelectDestinationStepForm?.DestinationTypeId)
             || ValidDestinationTypesWebAssemblyRuntimeBased(CreateResourceStepForm!.ResourceTypeId).Any(dt => dt.Id == SelectDestinationStepForm?.DestinationTypeId))
        {
            @switch (SelectDestinationStepForm?.DestinationTypeId.ToString())
            {
                case DestinationTypes.DockerEngineId:
                    <DockerContainerMetadata/>
                    break;
                case DestinationTypes.PodmanContainerId:
                case DestinationTypes.WebAssemblyId:
                    break;
            }
        }
        else
        {
            <div id="destination-type-metadata"></div>
        }
    </div>
</div>

@code {
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = null!;

    private CreateResourceStepForm? CreateResourceStepForm { get; set; }
    private SelectDestinationStepForm? SelectDestinationStepForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Debug.Assert(HttpContextAccessor.HttpContext != null, "HttpContextAccessor.HttpContext != null");
        var ploydWebStore = HttpContextAccessor.HttpContext.RequestServices.GetRequiredService<IPloydWebStore>();

        CreateResourceStepForm = await ploydWebStore
            .RetrieveAsync<CreateResourceStepForm>(nameof(CreateResourceStepForm));

        SelectDestinationStepForm = await ploydWebStore
            .RetrieveAsync<SelectDestinationStepForm>(nameof(SelectDestinationStepForm));
    }

    private List<DestinationTypeUi> ValidDestinationTypesContainerEngineBased(Guid? resourceTypeId)
    {
        return resourceTypeId switch
        {
            _ when resourceTypeId == Contract.ResourceTypes.Container => [DestinationTypesUi.DockerEngine, DestinationTypesUi.Podman],
            _ when resourceTypeId == Contract.ResourceTypes.DockerCompose => [DestinationTypesUi.DockerEngine, DestinationTypesUi.Podman],
            _ when resourceTypeId == Contract.ResourceTypes.PodmanCompose => [DestinationTypesUi.DockerEngine, DestinationTypesUi.Podman],
            _ => []
        };
    }

    private List<DestinationTypeUi> ValidDestinationTypesWebAssemblyRuntimeBased(Guid? resourceTypeId)
    {
        return resourceTypeId switch
        {
            _ when resourceTypeId == Contract.ResourceTypes.WebAssembly => [DestinationTypesUi.WebAssembly],
            _ => []
        };
    }

}
