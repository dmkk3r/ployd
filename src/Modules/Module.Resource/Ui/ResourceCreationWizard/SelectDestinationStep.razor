@using System.Diagnostics
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.DependencyInjection
@using Module.Destination.Contract
@using Modules.Shared.Interfaces
@using Module.Resource.Ui.ResourceCreationWizard.DestinationMetadata

<div class="flex flex-col gap-6 dark:text-white w-full">
    <h1 class="text-xl font-semibold">Choose the destination</h1>
    <div class="grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4"
         hx-get="/resources/create/wizard/metadata"
         hx-trigger="load, change"
         hx-target="#destination-type-metadata"
         hx-swap="innerHTML"
         hx-include="this">
        @foreach (var destinationType in ValidDestinationTypes(CreateResourceStepForm!.ResourceTypeId))
        {
            {
                var isChecked = SelectDestinationStepForm?.DestinationTypeId == destinationType.Id;
                <label class="block cursor-pointer bg-surface rounded-lg">
                    <input type="radio" name="destinationTypeId" value="@destinationType.Id" class="hidden peer"
                           checked="@isChecked"/>
                    <div
                        class="flex flex-col items-start p-4 gap-6 h-full peer-checked:bg-surface-light peer-checked:rounded-lg">
                        <img src="@destinationType.Icon" alt="@destinationType.Name"
                             class="h-10 object-scale-down"/>
                        <div class="flex flex-col gap-2">
                            <h2
                                class="font-semibold text-sm select-none truncate text-wrap">
                                @destinationType.Name
                            </h2>
                            <p
                                class="text-sm select-none truncate text-wrap">
                                @destinationType.Description
                            </p>
                        </div>
                    </div>
                </label>
            }
        }
    </div>

    <div id="destination-type-metadata">
        @if (ValidDestinationTypes(CreateResourceStepForm!.ResourceTypeId).Any(dt => dt.Id == SelectDestinationStepForm?.DestinationTypeId))
        {
            @switch (SelectDestinationStepForm?.DestinationTypeId.ToString())
            {
                case Module.Destination.Contract.DestinationTypes.DockerContainerId:
                    <DockerContainerMetadata/>
                    break;
                case Module.Destination.Contract.DestinationTypes.PodmanContainerId:
                case Module.Destination.Contract.DestinationTypes.WebAssemblyId:
                    break;
            }
        }
    </div>
</div>

@code {
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = null!;

    private CreateResourceStepForm? CreateResourceStepForm { get; set; }
    private SelectDestinationStepForm? SelectDestinationStepForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Debug.Assert(HttpContextAccessor.HttpContext != null, "HttpContextAccessor.HttpContext != null");
        var ploydWebStore = HttpContextAccessor.HttpContext.RequestServices.GetRequiredService<IPloydWebStore>();

        CreateResourceStepForm = await ploydWebStore
            .RetrieveAsync<CreateResourceStepForm>(nameof(CreateResourceStepForm));

        SelectDestinationStepForm = await ploydWebStore
            .RetrieveAsync<SelectDestinationStepForm>(nameof(SelectDestinationStepForm));
    }

    private List<DestinationTypeUi> DestinationTypes =>
    [
        DestinationTypesUi.DockerContainer,
        DestinationTypesUi.PodmanContainer,
        DestinationTypesUi.WebAssembly,
    ];

    private List<DestinationTypeUi> ValidDestinationTypes(Guid? resourceTypeId)
    {
        return resourceTypeId switch
        {
            _ when resourceTypeId == Module.Resource.Contract.ResourceTypes.Dockerfile => [DestinationTypesUi.DockerContainer, DestinationTypesUi.PodmanContainer],
            _ when resourceTypeId == Module.Resource.Contract.ResourceTypes.DockerCompose => [DestinationTypesUi.DockerContainer, DestinationTypesUi.PodmanContainer],
            _ when resourceTypeId == Module.Resource.Contract.ResourceTypes.PodmanCompose => [DestinationTypesUi.DockerContainer, DestinationTypesUi.PodmanContainer],
            _ when resourceTypeId == Module.Resource.Contract.ResourceTypes.OciImage => [DestinationTypesUi.DockerContainer, DestinationTypesUi.PodmanContainer],
            _ when resourceTypeId == Module.Resource.Contract.ResourceTypes.WebAssembly => [DestinationTypesUi.WebAssembly],
            _ => []
        };
    }

}
