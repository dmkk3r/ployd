@using System.Diagnostics
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.DependencyInjection
@using Module.Resource.Contract
@using Module.Resource.Helper
@using Module.Resource.Ui.ResourceCreationWizard.ResourceMetadata
@using Modules.Shared.Interfaces

<div class="flex flex-col gap-6 dark:text-white w-full h-full">
    <h1 class="text-lg font-semibold">Choose the resource type</h1>
    <div class="grid grid-cols-2 gap-8">
        <div class="grid grid-cols-2 gap-4"
             hx-get="/resources/create/wizard/metadata"
             hx-trigger="change"
             hx-target="#resource-type-metadata"
             hx-swap="innerHTML"
             hx-include="this">
            @foreach (var resourceTypeGroup in ResourceTypesUi.AllGrouped())
            {
                if (ResourceTypesHelper.ValidResourceTypes(SelectSourceStepForm!.SourceId, resourceTypeGroup.Key).Any())
                {
                    <h2 class="text-md font-semibold col-span-2">@resourceTypeGroup.Key</h2>
                }

                foreach (var resourceType in ResourceTypesHelper.ValidResourceTypes(SelectSourceStepForm!.SourceId, resourceTypeGroup.Key))
                {
                    {
                        var isChecked = CreateResourceStepForm?.ResourceTypeId == resourceType.Id ||
                                        CreateResourceStepForm?.ResourceTypeId == null &&
                                        resourceType.Id == ResourceTypesHelper.ValidResourceTypes(SelectSourceStepForm!.SourceId, resourceTypeGroup.Key).First().Id;

                        <StepPanel Id="@resourceType.Id" IdName="resourceTypeId" Name="@resourceType.Name"
                                   Description="@resourceType.Description"
                                   Icon="@resourceType.Icon" IsChecked="@isChecked"/>
                    }
                }
            }
        </div>
        <div id="resource-type-metadata">
            @switch (CreateResourceStepForm?.ResourceTypeId.ToString())
            {
                case ResourceTypes.DockerComposeId:
                case ResourceTypes.PodmanComposeId:
                    break;
                case ResourceTypes.ContainerId:
                    <OciMetadata/>
                    break;
                case ResourceTypes.WebAssemblyId:
                    break;
            }
        </div>
    </div>
</div>

@code {
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = null!;

    private SelectSourceStepForm? SelectSourceStepForm { get; set; }
    private CreateResourceStepForm? CreateResourceStepForm { get; set; }
    private ResourceTypeUi? SelectedResourceType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Debug.Assert(HttpContextAccessor.HttpContext != null, "HttpContextAccessor.HttpContext != null");

        var ploydWebStore = HttpContextAccessor.HttpContext.RequestServices.GetRequiredService<IPloydWebStore>();

        SelectSourceStepForm = await ploydWebStore
            .RetrieveAsync<SelectSourceStepForm>(nameof(SelectSourceStepForm));
        CreateResourceStepForm = await ploydWebStore
            .RetrieveAsync<CreateResourceStepForm>(nameof(CreateResourceStepForm));
    }

}
