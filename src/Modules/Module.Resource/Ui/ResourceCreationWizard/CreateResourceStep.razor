@using System.Diagnostics
@using System.Security.AccessControl
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.DependencyInjection
@using Module.Resource.Contract
@using Module.Source.Contract
@using Modules.Shared.Interfaces

<div class="flex flex-col gap-6 dark:text-white w-full">
    <h1 class="text-xl font-semibold">Choose the resource type</h1>

    <div class="grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4"
         hx-get="/resources/create/wizard/metadata"
         hx-trigger="load, change"
         hx-target="#resource-type-metadata"
         hx-swap="innerHTML"
         hx-include="this">
        @foreach (var resourceType in ValidResourceTypes(SelectSourceStepForm!.SourceId))
        {
            {
                var isChecked = CreateResourceStepForm?.ResourceTypeId == resourceType.Id;
                <label class="block cursor-pointer bg-surface rounded-lg">
                    <input type="radio" name="resourceTypeId" value="@resourceType.Id" class="hidden peer"
                           checked="@isChecked"/>
                    <div
                        class="flex flex-col items-start p-4 gap-6 h-full peer-checked:bg-surface-light peer-checked:rounded-lg">
                        <img src="@resourceType.Icon" alt="@resourceType.Name"
                             class="h-10 object-scale-down"/>
                        <div class="flex flex-col gap-2">
                            <h2
                                class="font-semibold text-sm select-none truncate text-wrap">
                                @resourceType.Name
                            </h2>
                            <p
                                class="text-sm select-none truncate text-wrap">
                                @resourceType.Description
                            </p>
                        </div>
                    </div>
                </label>
            }
        }
    </div>

    <div id="resource-type-metadata"></div>
</div>

@code {
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = null!;

    private SelectSourceStepForm? SelectSourceStepForm { get; set; }
    private CreateResourceStepForm? CreateResourceStepForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Debug.Assert(HttpContextAccessor.HttpContext != null, "HttpContextAccessor.HttpContext != null");

        var ploydWebStore = HttpContextAccessor.HttpContext.RequestServices.GetRequiredService<IPloydWebStore>();

        SelectSourceStepForm = await ploydWebStore
            .RetrieveAsync<SelectSourceStepForm>(nameof(SelectSourceStepForm));
        CreateResourceStepForm = await ploydWebStore
            .RetrieveAsync<CreateResourceStepForm>(nameof(CreateResourceStepForm));
    }

    private List<ResourceTypeUi> ResourceTypes =>
    [
        ResourceTypesUi.Dockerfile,
        ResourceTypesUi.DockerCompose,
        ResourceTypesUi.PodmanCompose,
        ResourceTypesUi.OciImage,
        ResourceTypesUi.WebAssembly,
    ];

    private List<ResourceTypeUi> ValidResourceTypes(Guid? sourceId)
    {
        return sourceId switch
        {
            _ when sourceId == SourceTypes.Git => [ResourceTypesUi.Dockerfile, ResourceTypesUi.DockerCompose, ResourceTypesUi.PodmanCompose, ResourceTypesUi.WebAssembly],
            _ when sourceId == SourceTypes.GitHub => [ResourceTypesUi.Dockerfile, ResourceTypesUi.DockerCompose, ResourceTypesUi.PodmanCompose, ResourceTypesUi.WebAssembly],
            _ when sourceId == SourceTypes.GitLab => [ResourceTypesUi.Dockerfile, ResourceTypesUi.DockerCompose, ResourceTypesUi.PodmanCompose, ResourceTypesUi.WebAssembly],
            _ when sourceId == SourceTypes.DockerHub => [ResourceTypesUi.OciImage],
            _ when sourceId == SourceTypes.Ghcr => [ResourceTypesUi.OciImage],
            _ => []
        };
    }

}
