@using System.Diagnostics
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.DependencyInjection
@using Module.Source.Contract
@using Modules.Shared.Interfaces
@using Module.Resource.Ui.ResourceCreationWizard.SourceMetadata

<div class="flex flex-col gap-6 dark:text-white w-full h-full">
    <h1 class="text-lg font-semibold">Choose the source</h1>
    <div class="grid grid-cols-2 gap-8">
        <div class="grid grid-cols-2 gap-4"
             hx-get="/resources/create/wizard/metadata"
             hx-trigger="change"
             hx-target="#source-metadata"
             hx-swap="innerHTML"
             hx-include="this">
            @foreach (var sourceTypeGroup in SourceTypesUi.AllGrouped())
            {
                <h2 class="text-md font-semibold col-span-2">@sourceTypeGroup.Key</h2>
                {
                    var firstChecked = SourceTypesUi.AllGrouped()
                        .SelectMany(x => x.Value).First();

                    foreach (var sourceType in sourceTypeGroup.Value)
                    {
                        var isChecked = SelectSourceStepForm?.SourceId == sourceType.Id ||
                                        SelectSourceStepForm?.SourceId == null && sourceType.Id == firstChecked.Id;
                        <StepPanel Id="@sourceType.Id" IdName="sourceId" Name="@sourceType.Name"
                                   Description="@sourceType.Description"
                                   Icon="@sourceType.Icon" IsChecked="@isChecked"/>
                    }
                }
            }
        </div>
        <div id="source-metadata">
            @switch (SelectSourceStepForm?.SourceId.ToString())
            {
                case SourceTypes.GitId:
                case SourceTypes.GitHubId:
                case SourceTypes.GitLabId:
                    break;
                case SourceTypes.DockerHubId:
                    <DockerhubMetadata/>
                    break;
                case SourceTypes.GhcrId:
                    break;
            }
        </div>
    </div>

</div>

@code {
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = null!;

    private SelectSourceStepForm? SelectSourceStepForm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Debug.Assert(HttpContextAccessor.HttpContext != null, "HttpContextAccessor.HttpContext != null");
        var ploydWebStore = HttpContextAccessor.HttpContext.RequestServices.GetRequiredService<IPloydWebStore>();

        SelectSourceStepForm = await ploydWebStore
            .RetrieveAsync<SelectSourceStepForm>(nameof(SelectSourceStepForm));
    }

}
