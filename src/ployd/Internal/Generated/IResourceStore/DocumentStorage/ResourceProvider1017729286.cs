// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Module.Resource;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.IResourceStore.DocumentStorage
{
    // START: UpsertResourceOperation1017729286
    public class UpsertResourceOperation1017729286 : Marten.Internal.Operations.StorageOperation<Module.Resource.Resource, System.Guid>
    {
        private readonly Module.Resource.Resource _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertResourceOperation1017729286(Module.Resource.Resource document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Module.Resource.Resource document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select resource.mt_upsert_resource(");
            var docType = _mapping.AliasFor(document.GetType());
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            var parameter3 = parameterBuilder.AppendParameter(docType);
            parameter3.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertResourceOperation1017729286
    
    
    // START: InsertResourceOperation1017729286
    public class InsertResourceOperation1017729286 : Marten.Internal.Operations.StorageOperation<Module.Resource.Resource, System.Guid>
    {
        private readonly Module.Resource.Resource _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertResourceOperation1017729286(Module.Resource.Resource document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Module.Resource.Resource document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select resource.mt_insert_resource(");
            var docType = _mapping.AliasFor(document.GetType());
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            var parameter3 = parameterBuilder.AppendParameter(docType);
            parameter3.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertResourceOperation1017729286
    
    
    // START: UpdateResourceOperation1017729286
    public class UpdateResourceOperation1017729286 : Marten.Internal.Operations.StorageOperation<Module.Resource.Resource, System.Guid>
    {
        private readonly Module.Resource.Resource _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateResourceOperation1017729286(Module.Resource.Resource document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Module.Resource.Resource document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select resource.mt_update_resource(");
            var docType = _mapping.AliasFor(document.GetType());
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            var parameter3 = parameterBuilder.AppendParameter(docType);
            parameter3.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateResourceOperation1017729286
    
    
    // START: QueryOnlyResourceSelector1017729286
    public class QueryOnlyResourceSelector1017729286 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<Module.Resource.Resource>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyResourceSelector1017729286(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Module.Resource.Resource Resolve(System.Data.Common.DbDataReader reader)
        {

            Module.Resource.Resource document;
            var typeAlias = reader.GetFieldValue<string>(1);
            document = (Module.Resource.Resource) _serializer.FromJson(_mapping.TypeFor(typeAlias), reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<Module.Resource.Resource> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            Module.Resource.Resource document;
            var typeAlias = await reader.GetFieldValueAsync<string>(1, token).ConfigureAwait(false);
            document = (Module.Resource.Resource) (await _serializer.FromJsonAsync(_mapping.TypeFor(typeAlias), reader, 0, token).ConfigureAwait(false));
            return document;
        }

    }

    // END: QueryOnlyResourceSelector1017729286
    
    
    // START: LightweightResourceSelector1017729286
    public class LightweightResourceSelector1017729286 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<Module.Resource.Resource, System.Guid>, Marten.Linq.Selectors.ISelector<Module.Resource.Resource>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightResourceSelector1017729286(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Module.Resource.Resource Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            Module.Resource.Resource document;
            var typeAlias = reader.GetFieldValue<string>(2);
            document = (Module.Resource.Resource) _serializer.FromJson(_mapping.TypeFor(typeAlias), reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Module.Resource.Resource> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            Module.Resource.Resource document;
            var typeAlias = await reader.GetFieldValueAsync<string>(2, token).ConfigureAwait(false);
            document = (Module.Resource.Resource) (await _serializer.FromJsonAsync(_mapping.TypeFor(typeAlias), reader, 1, token).ConfigureAwait(false));
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightResourceSelector1017729286
    
    
    // START: IdentityMapResourceSelector1017729286
    public class IdentityMapResourceSelector1017729286 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<Module.Resource.Resource, System.Guid>, Marten.Linq.Selectors.ISelector<Module.Resource.Resource>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapResourceSelector1017729286(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Module.Resource.Resource Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Module.Resource.Resource document;
            var typeAlias = reader.GetFieldValue<string>(2);
            document = (Module.Resource.Resource) _serializer.FromJson(_mapping.TypeFor(typeAlias), reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<Module.Resource.Resource> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Module.Resource.Resource document;
            var typeAlias = await reader.GetFieldValueAsync<string>(2, token).ConfigureAwait(false);
            document = (Module.Resource.Resource) (await _serializer.FromJsonAsync(_mapping.TypeFor(typeAlias), reader, 1, token).ConfigureAwait(false));
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapResourceSelector1017729286
    
    
    // START: DirtyTrackingResourceSelector1017729286
    public class DirtyTrackingResourceSelector1017729286 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<Module.Resource.Resource, System.Guid>, Marten.Linq.Selectors.ISelector<Module.Resource.Resource>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingResourceSelector1017729286(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Module.Resource.Resource Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Module.Resource.Resource document;
            var typeAlias = reader.GetFieldValue<string>(2);
            document = (Module.Resource.Resource) _serializer.FromJson(_mapping.TypeFor(typeAlias), reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Module.Resource.Resource> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Module.Resource.Resource document;
            var typeAlias = await reader.GetFieldValueAsync<string>(2, token).ConfigureAwait(false);
            document = (Module.Resource.Resource) (await _serializer.FromJsonAsync(_mapping.TypeFor(typeAlias), reader, 1, token).ConfigureAwait(false));
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingResourceSelector1017729286
    
    
    // START: QueryOnlyResourceDocumentStorage1017729286
    public class QueryOnlyResourceDocumentStorage1017729286 : Marten.Internal.Storage.QueryOnlyDocumentStorage<Module.Resource.Resource, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyResourceDocumentStorage1017729286(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Module.Resource.Resource document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.UpdateResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.InsertResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.UpsertResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Module.Resource.Resource document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.IResourceStore.DocumentStorage.QueryOnlyResourceSelector1017729286(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyResourceDocumentStorage1017729286
    
    
    // START: LightweightResourceDocumentStorage1017729286
    public class LightweightResourceDocumentStorage1017729286 : Marten.Internal.Storage.LightweightDocumentStorage<Module.Resource.Resource, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightResourceDocumentStorage1017729286(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Module.Resource.Resource document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.UpdateResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.InsertResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.UpsertResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Module.Resource.Resource document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.IResourceStore.DocumentStorage.LightweightResourceSelector1017729286(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightResourceDocumentStorage1017729286
    
    
    // START: IdentityMapResourceDocumentStorage1017729286
    public class IdentityMapResourceDocumentStorage1017729286 : Marten.Internal.Storage.IdentityMapDocumentStorage<Module.Resource.Resource, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapResourceDocumentStorage1017729286(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Module.Resource.Resource document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.UpdateResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.InsertResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.UpsertResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Module.Resource.Resource document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.IResourceStore.DocumentStorage.IdentityMapResourceSelector1017729286(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapResourceDocumentStorage1017729286
    
    
    // START: DirtyTrackingResourceDocumentStorage1017729286
    public class DirtyTrackingResourceDocumentStorage1017729286 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<Module.Resource.Resource, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingResourceDocumentStorage1017729286(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Module.Resource.Resource document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.UpdateResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.InsertResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IResourceStore.DocumentStorage.UpsertResourceOperation1017729286
            (
                document, Identity(document),
                session.Versions.ForType<Module.Resource.Resource, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Module.Resource.Resource document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Module.Resource.Resource document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.IResourceStore.DocumentStorage.DirtyTrackingResourceSelector1017729286(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingResourceDocumentStorage1017729286
    
    
    // START: ResourceBulkLoader1017729286
    public class ResourceBulkLoader1017729286 : Marten.Internal.CodeGeneration.BulkLoader<Module.Resource.Resource, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<Module.Resource.Resource, System.Guid> _storage;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public ResourceBulkLoader1017729286(Marten.Internal.Storage.IDocumentStorage<Module.Resource.Resource, System.Guid> storage, Marten.Schema.DocumentMapping mapping) : base(storage)
        {
            _storage = storage;
            _mapping = mapping;
        }


        public const string MAIN_LOADER_SQL = "COPY resource.mt_doc_resource(\"mt_dotnet_type\", \"id\", \"mt_doc_type\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_resource_temp(\"mt_dotnet_type\", \"id\", \"mt_doc_type\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into resource.mt_doc_resource (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", \"mt_doc_type\", mt_last_modified) (select mt_doc_resource_temp.\"id\", mt_doc_resource_temp.\"data\", mt_doc_resource_temp.\"mt_version\", mt_doc_resource_temp.\"mt_dotnet_type\", mt_doc_resource_temp.\"mt_doc_type\", transaction_timestamp() from mt_doc_resource_temp left join resource.mt_doc_resource on mt_doc_resource_temp.id = resource.mt_doc_resource.id where resource.mt_doc_resource.id is null)";

        public const string OVERWRITE_SQL = "update resource.mt_doc_resource target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_doc_type = source.mt_doc_type, mt_last_modified = transaction_timestamp() FROM mt_doc_resource_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_resource_temp (like resource.mt_doc_resource including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, Module.Resource.Resource document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            var docType = _mapping.AliasFor(document.GetType());
            writer.Write(docType, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, Module.Resource.Resource document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            var docType = _mapping.AliasFor(document.GetType());
            await writer.WriteAsync(docType, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: ResourceBulkLoader1017729286
    
    
    // START: ResourceProvider1017729286
    public class ResourceProvider1017729286 : Marten.Internal.Storage.DocumentProvider<Module.Resource.Resource>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public ResourceProvider1017729286(Marten.Schema.DocumentMapping mapping) : base(new ResourceBulkLoader1017729286(new QueryOnlyResourceDocumentStorage1017729286(mapping), mapping), new QueryOnlyResourceDocumentStorage1017729286(mapping), new LightweightResourceDocumentStorage1017729286(mapping), new IdentityMapResourceDocumentStorage1017729286(mapping), new DirtyTrackingResourceDocumentStorage1017729286(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: ResourceProvider1017729286
    
    
}

