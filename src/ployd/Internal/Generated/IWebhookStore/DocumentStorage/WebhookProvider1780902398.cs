// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Module.Webhook;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.IWebhookStore.DocumentStorage
{
    // START: UpsertWebhookOperation1780902398
    public class UpsertWebhookOperation1780902398 : Marten.Internal.Operations.StorageOperation<Module.Webhook.Webhook, System.Guid>
    {
        private readonly Module.Webhook.Webhook _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertWebhookOperation1780902398(Module.Webhook.Webhook document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Module.Webhook.Webhook document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select webhook.mt_upsert_webhook(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpsertWebhookOperation1780902398
    
    
    // START: InsertWebhookOperation1780902398
    public class InsertWebhookOperation1780902398 : Marten.Internal.Operations.StorageOperation<Module.Webhook.Webhook, System.Guid>
    {
        private readonly Module.Webhook.Webhook _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertWebhookOperation1780902398(Module.Webhook.Webhook document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Module.Webhook.Webhook document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select webhook.mt_insert_webhook(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: InsertWebhookOperation1780902398
    
    
    // START: UpdateWebhookOperation1780902398
    public class UpdateWebhookOperation1780902398 : Marten.Internal.Operations.StorageOperation<Module.Webhook.Webhook, System.Guid>
    {
        private readonly Module.Webhook.Webhook _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateWebhookOperation1780902398(Module.Webhook.Webhook document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }



        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Weasel.Postgresql.IGroupedParameterBuilder parameterBuilder, Weasel.Postgresql.ICommandBuilder builder, Module.Webhook.Webhook document, Marten.Internal.IMartenSession session)
        {
            builder.Append("select webhook.mt_update_webhook(");
            var parameter0 = parameterBuilder.AppendParameter(session.Serializer.ToJson(_document));
            parameter0.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            // .Net Class Type
            var parameter1 = parameterBuilder.AppendParameter(_document.GetType().FullName);
            parameter1.NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            var parameter2 = parameterBuilder.AppendParameter(document.Id);
            setVersionParameter(parameterBuilder);
            builder.Append(')');
        }

    }

    // END: UpdateWebhookOperation1780902398
    
    
    // START: QueryOnlyWebhookSelector1780902398
    public class QueryOnlyWebhookSelector1780902398 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<Module.Webhook.Webhook>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyWebhookSelector1780902398(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Module.Webhook.Webhook Resolve(System.Data.Common.DbDataReader reader)
        {

            Module.Webhook.Webhook document;
            document = _serializer.FromJson<Module.Webhook.Webhook>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<Module.Webhook.Webhook> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            Module.Webhook.Webhook document;
            document = await _serializer.FromJsonAsync<Module.Webhook.Webhook>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyWebhookSelector1780902398
    
    
    // START: LightweightWebhookSelector1780902398
    public class LightweightWebhookSelector1780902398 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<Module.Webhook.Webhook, System.Guid>, Marten.Linq.Selectors.ISelector<Module.Webhook.Webhook>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightWebhookSelector1780902398(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Module.Webhook.Webhook Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            Module.Webhook.Webhook document;
            document = _serializer.FromJson<Module.Webhook.Webhook>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Module.Webhook.Webhook> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            Module.Webhook.Webhook document;
            document = await _serializer.FromJsonAsync<Module.Webhook.Webhook>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightWebhookSelector1780902398
    
    
    // START: IdentityMapWebhookSelector1780902398
    public class IdentityMapWebhookSelector1780902398 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<Module.Webhook.Webhook, System.Guid>, Marten.Linq.Selectors.ISelector<Module.Webhook.Webhook>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapWebhookSelector1780902398(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Module.Webhook.Webhook Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Module.Webhook.Webhook document;
            document = _serializer.FromJson<Module.Webhook.Webhook>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<Module.Webhook.Webhook> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Module.Webhook.Webhook document;
            document = await _serializer.FromJsonAsync<Module.Webhook.Webhook>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapWebhookSelector1780902398
    
    
    // START: DirtyTrackingWebhookSelector1780902398
    public class DirtyTrackingWebhookSelector1780902398 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<Module.Webhook.Webhook, System.Guid>, Marten.Linq.Selectors.ISelector<Module.Webhook.Webhook>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingWebhookSelector1780902398(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public Module.Webhook.Webhook Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Module.Webhook.Webhook document;
            document = _serializer.FromJson<Module.Webhook.Webhook>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<Module.Webhook.Webhook> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            Module.Webhook.Webhook document;
            document = await _serializer.FromJsonAsync<Module.Webhook.Webhook>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingWebhookSelector1780902398
    
    
    // START: QueryOnlyWebhookDocumentStorage1780902398
    public class QueryOnlyWebhookDocumentStorage1780902398 : Marten.Internal.Storage.QueryOnlyDocumentStorage<Module.Webhook.Webhook, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyWebhookDocumentStorage1780902398(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Module.Webhook.Webhook document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.UpdateWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.InsertWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.UpsertWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Module.Webhook.Webhook document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.IWebhookStore.DocumentStorage.QueryOnlyWebhookSelector1780902398(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: QueryOnlyWebhookDocumentStorage1780902398
    
    
    // START: LightweightWebhookDocumentStorage1780902398
    public class LightweightWebhookDocumentStorage1780902398 : Marten.Internal.Storage.LightweightDocumentStorage<Module.Webhook.Webhook, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightWebhookDocumentStorage1780902398(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Module.Webhook.Webhook document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.UpdateWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.InsertWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.UpsertWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Module.Webhook.Webhook document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.IWebhookStore.DocumentStorage.LightweightWebhookSelector1780902398(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: LightweightWebhookDocumentStorage1780902398
    
    
    // START: IdentityMapWebhookDocumentStorage1780902398
    public class IdentityMapWebhookDocumentStorage1780902398 : Marten.Internal.Storage.IdentityMapDocumentStorage<Module.Webhook.Webhook, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapWebhookDocumentStorage1780902398(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Module.Webhook.Webhook document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.UpdateWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.InsertWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.UpsertWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Module.Webhook.Webhook document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.IWebhookStore.DocumentStorage.IdentityMapWebhookSelector1780902398(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: IdentityMapWebhookDocumentStorage1780902398
    
    
    // START: DirtyTrackingWebhookDocumentStorage1780902398
    public class DirtyTrackingWebhookDocumentStorage1780902398 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<Module.Webhook.Webhook, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingWebhookDocumentStorage1780902398(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(Module.Webhook.Webhook document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.UpdateWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.InsertWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.IWebhookStore.DocumentStorage.UpsertWebhookOperation1780902398
            (
                document, Identity(document),
                session.Versions.ForType<Module.Webhook.Webhook, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(Module.Webhook.Webhook document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(Module.Webhook.Webhook document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.IWebhookStore.DocumentStorage.DirtyTrackingWebhookSelector1780902398(session, _document);
        }


        public override object RawIdentityValue(System.Guid id)
        {
            return id;
        }


        public override Npgsql.NpgsqlParameter BuildManyIdParameter(System.Guid[] ids)
        {
            return base.BuildManyIdParameter(ids);
        }

    }

    // END: DirtyTrackingWebhookDocumentStorage1780902398
    
    
    // START: WebhookBulkLoader1780902398
    public class WebhookBulkLoader1780902398 : Marten.Internal.CodeGeneration.BulkLoader<Module.Webhook.Webhook, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<Module.Webhook.Webhook, System.Guid> _storage;

        public WebhookBulkLoader1780902398(Marten.Internal.Storage.IDocumentStorage<Module.Webhook.Webhook, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY webhook.mt_doc_webhook(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_webhook_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into webhook.mt_doc_webhook (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_webhook_temp.\"id\", mt_doc_webhook_temp.\"data\", mt_doc_webhook_temp.\"mt_version\", mt_doc_webhook_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_webhook_temp left join webhook.mt_doc_webhook on mt_doc_webhook_temp.id = webhook.mt_doc_webhook.id where webhook.mt_doc_webhook.id is null)";

        public const string OVERWRITE_SQL = "update webhook.mt_doc_webhook target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_webhook_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_webhook_temp (like webhook.mt_doc_webhook including defaults)";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, Module.Webhook.Webhook document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, Module.Webhook.Webhook document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: WebhookBulkLoader1780902398
    
    
    // START: WebhookProvider1780902398
    public class WebhookProvider1780902398 : Marten.Internal.Storage.DocumentProvider<Module.Webhook.Webhook>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public WebhookProvider1780902398(Marten.Schema.DocumentMapping mapping) : base(new WebhookBulkLoader1780902398(new QueryOnlyWebhookDocumentStorage1780902398(mapping)), new QueryOnlyWebhookDocumentStorage1780902398(mapping), new LightweightWebhookDocumentStorage1780902398(mapping), new IdentityMapWebhookDocumentStorage1780902398(mapping), new DirtyTrackingWebhookDocumentStorage1780902398(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: WebhookProvider1780902398
    
    
}

