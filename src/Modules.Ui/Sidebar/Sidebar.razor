@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.DependencyInjection
@using Modules.Shared.Interfaces
@using Modules.Shared.Services

<CascadingValue TValue="SidebarContext" IsFixed="true" Value="@_sidebarContext">
    <aside class="w-64 min-w-64 border-r-surface shadow-lg py-4 bg-surface rounded-r-lg"
           hx-headers="js:{'X-Sidebar-OpenItems': getOpenDetails()}">
        <nav class="flex flex-col justify-between h-full gap-2">
            @if (SidebarHeader != null)
            {
                <div>
                    @SidebarHeader
                </div>
            }
            <ul class="flex-grow overflow-auto">
                <Defer>
                    @SidebarItems
                </Defer>
            </ul>
            @if (SidebarFooter != null)
            {
                <div>
                    @SidebarFooter
                </div>
            }
        </nav>
    </aside>
</CascadingValue>

<script>
    function getOpenDetails() {
        return Array.from(document.querySelectorAll("details[open]")).map((el) => el.id);
    }
</script>

@code {
    [Parameter] public RenderFragment? SidebarHeader { get; set; }
    [Parameter] public RenderFragment? SidebarItems { get; set; }
    [Parameter] public RenderFragment? SidebarFooter { get; set; }
    [Parameter] public string? CurrentPath { get; set; }
    [Parameter] public HttpContext? HttpContext { get; set; }

    private SidebarContext _sidebarContext;

    public Sidebar()
    {
        _sidebarContext = new SidebarContext();
    }

    protected override async Task OnParametersSetAsync()
    {
        _sidebarContext.CurrentPath = CurrentPath;

        if (HttpContext is null)
            return;

        var ploydWebStore = HttpContext.RequestServices.GetRequiredService<IPloydWebStore>();

        var openItemsHeaderExists = HttpContext.Request.Headers.ContainsKey("X-Sidebar-OpenItems");

        if (openItemsHeaderExists)
        {
            var openItems = HttpContext?.Request.Headers["X-Sidebar-OpenItems"];
            var openDetails = string.IsNullOrWhiteSpace(openItems) ? [] : openItems.ToString()!.Split(',').ToList();

            await ploydWebStore.StoreAsync(nameof(SidebarItems), new SidebarItems
            {
                OpenDetails = openDetails
            });

            _sidebarContext.CurrentOpenDetails = openDetails;
        }
        else
        {
            var sidebarItems = await ploydWebStore.RetrieveAsync<SidebarItems>(nameof(SidebarItems));
            if (sidebarItems is not null)
            {
                _sidebarContext.CurrentOpenDetails = sidebarItems.OpenDetails;
            }
        }
    }

}
